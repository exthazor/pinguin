"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class AvatarCommand extends discord_akairo_1.Command {
    constructor() {
        super("avatar", {
            aliases: ["avatar", "av", "photo", "picture bhej re saale", "image", "img"],
            category: "Public Commands",
            description: {
                content: "Display the avatar of a member",
                usage: "avatar [ member ]",
                examples: [
                    "avatar",
                    "avatar @Host#0001",
                    "avatar @Captain Entropy#8973",
                    "avatar host"
                ]
            },
            ratelimit: 3,
            args: [
                {
                    id: "member",
                    type: "member",
                    match: "rest",
                    default: (msg) => msg.member
                },
                {
                    id: "size",
                    type: (_, str) => {
                        if (str && !isNaN(Number(str)) && [16, 32, 64, 128, 256, 512, 1024, 2048, 4196].includes(Number(str)))
                            return Number(str);
                        return null;
                    },
                    match: "option",
                    flag: ["-size="],
                    default: 2048
                }
            ]
        });
    }
    exec(message, { member, size }) {
        return message.util.send(new discord_js_1.MessageEmbed()
            .setTitle(`${`LMAO look at ${member.user.tag}'s ugly face`}:joy:`)
            .setColor("RANDOM")
            .setImage(member.user.displayAvatarURL({ size: size })));
    }
}
exports.default = AvatarCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXZhdGFyQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9QdWJsaWMgQ29tbWFuZHMvQXZhdGFyQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUF3QztBQUN4QywyQ0FBMEU7QUFFMUUsTUFBcUIsYUFBYyxTQUFRLHdCQUFPO0lBQzlDO1FBQ0ksS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNaLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUM7WUFDM0UsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixXQUFXLEVBQUU7Z0JBQ1QsT0FBTyxFQUFFLGdDQUFnQztnQkFDekMsS0FBSyxFQUFFLG1CQUFtQjtnQkFDMUIsUUFBUSxFQUFFO29CQUNOLFFBQVE7b0JBQ1IsbUJBQW1CO29CQUNuQiw4QkFBOEI7b0JBQzlCLGFBQWE7aUJBQ2hCO2FBQ0o7WUFDRCxTQUFTLEVBQUUsQ0FBQztZQUNaLElBQUksRUFBRTtnQkFDRjtvQkFDSSxFQUFFLEVBQUUsUUFBUTtvQkFDWixJQUFJLEVBQUUsUUFBUTtvQkFDZCxLQUFLLEVBQUUsTUFBTTtvQkFDYixPQUFPLEVBQUUsQ0FBQyxHQUFZLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNO2lCQUN4QztnQkFDRDtvQkFDSSxFQUFFLEVBQUUsTUFBTTtvQkFDVixJQUFJLEVBQUUsQ0FBQyxDQUFTLEVBQUUsR0FBVyxFQUFpQixFQUFFO3dCQUM1QyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFBRSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTt3QkFDekgsT0FBTyxJQUFJLENBQUE7b0JBQ2YsQ0FBQztvQkFDRCxLQUFLLEVBQUUsUUFBUTtvQkFDZixJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUM7b0JBQ2hCLE9BQU8sRUFBRSxJQUFJO2lCQUNoQjthQUNKO1NBQ0osQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLElBQUksQ0FBQyxPQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBeUM7UUFDakYsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLHlCQUFZLEVBQUU7YUFDMUMsUUFBUSxDQUFDLEdBQUcsZ0JBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxjQUFjLE9BQU8sQ0FBQzthQUNqRSxRQUFRLENBQUMsUUFBUSxDQUFDO2FBQ2xCLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLElBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQ25FLENBQUE7SUFDTCxDQUFDO0NBQ0o7QUE1Q0QsZ0NBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiXG5pbXBvcnQgeyBNZXNzYWdlLCBHdWlsZE1lbWJlciwgTWVzc2FnZUVtYmVkLCBJbWFnZVNpemUgfSBmcm9tIFwiZGlzY29yZC5qc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF2YXRhckNvbW1hbmQgZXh0ZW5kcyBDb21tYW5ke1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcihcImF2YXRhclwiLCB7XG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJhdmF0YXJcIiwgXCJhdlwiLCBcInBob3RvXCIsIFwicGljdHVyZSBiaGVqIHJlIHNhYWxlXCIsIFwiaW1hZ2VcIiwgXCJpbWdcIl0sXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJQdWJsaWMgQ29tbWFuZHNcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogXCJEaXNwbGF5IHRoZSBhdmF0YXIgb2YgYSBtZW1iZXJcIixcbiAgICAgICAgICAgICAgICB1c2FnZTogXCJhdmF0YXIgWyBtZW1iZXIgXVwiLFxuICAgICAgICAgICAgICAgIGV4YW1wbGVzOiBbXG4gICAgICAgICAgICAgICAgICAgIFwiYXZhdGFyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYXZhdGFyIEBIb3N0IzAwMDFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhdmF0YXIgQENhcHRhaW4gRW50cm9weSM4OTczXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYXZhdGFyIGhvc3RcIlxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByYXRlbGltaXQ6IDMsXG4gICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogXCJtZW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtZW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IFwicmVzdFwiLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAobXNnOiBNZXNzYWdlKSA9PiBtc2cubWVtYmVyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBcInNpemVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogKF86TWVzc2FnZSwgc3RyOiBzdHJpbmcpOiBudWxsIHwgTnVtYmVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHIgJiYgIWlzTmFOKE51bWJlcihzdHIpKSAmJiBbMTYsIDMyLCA2NCwgMTI4LCAyNTYsIDUxMiwgMTAyNCwgMjA0OCwgNDE5Nl0uaW5jbHVkZXMoTnVtYmVyKHN0cikpKSByZXR1cm4gTnVtYmVyKHN0cilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiBcIm9wdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBmbGFnOiBbXCItc2l6ZT1cIl0sIC8vYXZhdGFyIEBIb3N0IzAwMDEgLXNpemU9MTA4MFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAyMDQ4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1YmxpYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UsIHsgbWVtYmVyLCBzaXplIH06IHsgbWVtYmVyOiBHdWlsZE1lbWJlciwgc2l6ZTogbnVtYmVyIH0pOiBQcm9taXNlPE1lc3NhZ2U+e1xuICAgICAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQobmV3IE1lc3NhZ2VFbWJlZCgpXG4gICAgICAgIC5zZXRUaXRsZShgJHtgTE1BTyBsb29rIGF0ICR7bWVtYmVyLnVzZXIudGFnfSdzIHVnbHkgZmFjZWB9OmpveTpgKVxuICAgICAgICAuc2V0Q29sb3IoXCJSQU5ET01cIilcbiAgICAgICAgLnNldEltYWdlKG1lbWJlci51c2VyLmRpc3BsYXlBdmF0YXJVUkwoeyBzaXplOiBzaXplIGFzIEltYWdlU2l6ZSB9KSlcbiAgICAgICAgKVxuICAgIH1cbn0iXX0=